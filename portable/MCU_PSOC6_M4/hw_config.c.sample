/* ========================================
 *
 * Copyright YOUR COMPANY, THE YEAR
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF your company.
 *
 * ========================================
*/
/* 

This file should be tailored to match the hardware design that is specified in 
TopDesign.cysch and Design Wide Resources/Pins (the .cydwr file).

There should be one element of the spi[] array for each hardware SPI, and the 
name prefix (e.g.: "SPI_1") will depend on the name given in TopDesign.
Each SPI needs its own interrupt callback function that specifies the correct 
element in the spi[] array. E.g.: spi[0]. 

There should be one element of the sd_cards[] array for each SD card slot. 
(There is no corresponding component in TopDesign.) 
The name is arbitrary. The rest of the constants will depend on the type of socket,
which SPI it is driven by, and how it is wired.

*/


#include <string.h>

///* FreeRTOS includes. */
//#include "FreeRTOSFATConfig.h"

#include "project.h" 
#include "hw_config.h"

// SPI Interrupts
void UserSDCrd_SPI_ISR();
void SysSDCrd0_SPI_ISR();

// SPI DMA Interrupts
void UserSDCrd_rxDmaComplete();
void UserSDCrd_txDmaComplete();
void SysSDCrd0_rxDmaComplete();
void SysSDCrd0_txDmaComplete();

/* ********************************************************************** */
/* Hardware Configuration of SPI "objects"                                */
/* ********************************************************************** */

static spi_t spi[] = { 
    { // spi[0]
		.base = UserSDCrd_SPI_HW, // SPI component
		.context = &UserSDCrd_SPI_context, // SPI component
		.config = &UserSDCrd_SPI_config, // SPI component
		.dividerType = UserSDCrd_SPI_SCBCLK_DIV_TYPE, // Clock divider for setting frequency
		.dividerNum = UserSDCrd_SPI_SCBCLK_DIV_NUM, // Clock divider for setting frequency
		.spi_miso_port = UserSDCrd_SPI_miso_m_0_PORT, // Refer to Design Wide Resouces, Pins, in the .cydwr file
		.spi_miso_num = UserSDCrd_SPI_miso_m_0_NUM, // MISO GPIO pin number for pull-up
		.intcfg = &UserSDCrd_SPI_SCB_IRQ_cfg, // Interrupt
		.userIsr = &UserSDCrd_SPI_ISR,  // Interrupt. Note: NOT UserSDCrd_SPI_Interrupt
        // RX DMA:
		.rxDma_base = UserSDCrd_rxDma_HW,
		.rxDma_channel = UserSDCrd_rxDma_DW_CHANNEL,
		.rxDma_Descriptor_1 = &UserSDCrd_rxDma_Descriptor_1,
		.rxDma_Descriptor_1_config = &UserSDCrd_rxDma_Descriptor_1_config,
		.rxDma_channelConfig = {
			&UserSDCrd_rxDma_Descriptor_1,
			UserSDCrd_rxDma_PREEMPTABLE,
			UserSDCrd_rxDma_PRIORITY,
			.enable = false,
			UserSDCrd_rxDma_BUFFERABLE},
		.intRxDma_ISR = UserSDCrd_rxDmaComplete,
		.intRxDma_cfg = &UserSDCrd_rxDma_Interrupt_cfg,
        // TX DMA:
		.txDma_base = UserSDCrd_txDma_HW,
		.txDma_channel = UserSDCrd_txDma_DW_CHANNEL,
		.txDma_Descriptor_1 = &UserSDCrd_txDma_Descriptor_1,
		.txDma_Descriptor_1_config = &UserSDCrd_txDma_Descriptor_1_config,
		.txDma_channelConfig = {
			&UserSDCrd_txDma_Descriptor_1,
			UserSDCrd_txDma_PREEMPTABLE,
			UserSDCrd_txDma_PRIORITY,
			.enable = false,
			UserSDCrd_txDma_BUFFERABLE},        
		.intTxDma_ISR = UserSDCrd_txDmaComplete,        
		.intTxDma_cfg = &UserSDCrd_txDma_Interrupt_cfg,        
        // State variables:            .initialized = false,			
        .owner = 0, // Owning task, assigned dynamically
		.mutex = 0  // Guard semaphore, assigned dynamically
	}, { // spi[1]
		.base = SysSDCrd0_SPI_HW, // SPI component
		.context = &SysSDCrd0_SPI_context, // SPI component
		.config = &SysSDCrd0_SPI_config, // SPI component
		.dividerType = SysSDCrd0_SPI_SCBCLK_DIV_TYPE, // Clock divider for setting frequency
		.dividerNum = SysSDCrd0_SPI_SCBCLK_DIV_NUM, // Clock divider for setting frequency
		.spi_miso_port = SysSDCrd0_SPI_miso_m_0_PORT, // Refer to Design Wide Resouces, Pins, in the .cydwr file
		.spi_miso_num = SysSDCrd0_SPI_miso_m_0_NUM, // MISO GPIO pin number for pull-up (see cyfitter_gpio.h)
		.intcfg = &SysSDCrd0_SPI_SCB_IRQ_cfg, // Interrupt
		.userIsr = &SysSDCrd0_SPI_ISR, // Interrupt
        // RX DMA:
		.rxDma_base = SysSDCrd0_rxDma_HW,
		.rxDma_channel = SysSDCrd0_rxDma_DW_CHANNEL,
		.rxDma_Descriptor_1 = &SysSDCrd0_rxDma_Descriptor_1,
		.rxDma_Descriptor_1_config = &SysSDCrd0_rxDma_Descriptor_1_config,
		.rxDma_channelConfig = {
			&SysSDCrd0_rxDma_Descriptor_1,
			SysSDCrd0_rxDma_PREEMPTABLE,
			SysSDCrd0_rxDma_PRIORITY,
			.enable = false,
			SysSDCrd0_rxDma_BUFFERABLE},
		.intRxDma_ISR = SysSDCrd0_rxDmaComplete,
		.intRxDma_cfg = &SysSDCrd0_rxDma_Interrupt_cfg,
        // TX DMA:
		.txDma_base = SysSDCrd0_txDma_HW,
		.txDma_channel = SysSDCrd0_txDma_DW_CHANNEL,
		.txDma_Descriptor_1 = &SysSDCrd0_txDma_Descriptor_1,
		.txDma_Descriptor_1_config = &SysSDCrd0_txDma_Descriptor_1_config,
		.txDma_channelConfig = {
			&SysSDCrd0_txDma_Descriptor_1,
			SysSDCrd0_txDma_PREEMPTABLE,
			SysSDCrd0_txDma_PRIORITY,
			.enable = false,
			SysSDCrd0_txDma_BUFFERABLE},        
		.intTxDma_ISR = SysSDCrd0_txDmaComplete,        
		.intTxDma_cfg = &SysSDCrd0_txDma_Interrupt_cfg,        
        // State variables:
        .initialized = false,
		.owner = 0, // Owning task, assigned dynamically
		.mutex = 0  // Guard semaphore, assigned dynamically
	}
};

// Interrupt to notify the user about occurrences of SPI Events.
// Each SPI has its own interrupt.
// Notifies task when a transfer is complete.
void UserSDCrd_SPI_ISR() {
	spi_ISR(&spi[0]);
}
void UserSDCrd_rxDmaComplete() {
	spi_RxDmaComplete(&spi[0]);
}
void UserSDCrd_txDmaComplete() {
	spi_TxDmaComplete(&spi[0]);
}

void SysSDCrd0_SPI_ISR() {
	spi_ISR(&spi[1]);
}
void SysSDCrd0_rxDmaComplete() {
	spi_RxDmaComplete(&spi[1]);
}
void SysSDCrd0_txDmaComplete() {
	spi_TxDmaComplete(&spi[1]);
}

/* ********************************************************************** */
/* SD Cards configuration                                                 */
/* ********************************************************************** */

// Card Detect Port Interrupt Service Routines
void UserSDCrd_Detect_ISR();
void Sys_SDCrd0_Detect_ISR();

// Hardware Configuration of the SD Card "objects"
static sd_card_t sd_cards[] = { 	// One for each SD card
	{ // sd_cards[0]
		.pcName = "UserSDCrd",  // Name used to mount device
		.spi = &spi[0], // Pointer to the SPI driving this card
        .ss = UserSDCrd_SPI_SPI_SLAVE_SELECT0, // The SPI slave select line for this SD card
		.card_detect_gpio_port = UserSDCrd_Detect_PORT, // Card detect
		.card_detect_gpio_num = UserSDCrd_Detect_NUM, // Card detect
		.card_detect_int_cfg = &UserSDCrd_Detect_Interrupt_cfg, 
		.card_detect_ISR = UserSDCrd_Detect_ISR,  
        .card_detect_task = 0,            
		.card_detected_true = 0, // truth is 0
        .m_Status = STA_NOINIT, 
        .sectors = 0, 
        .card_type = 0, 
        .mutex = 0,
        .ff_disk_count = 0,
		.ff_disks = NULL        
    } , { // sd_cards[1]
		.pcName = "SysSDCrd0",   // Name used to mount device
		.spi = &spi[1], // Pointer to the SPI driving this card
		.ss = SysSDCrd0_SPI_SPI_SLAVE_SELECT0, // The SPI slave select line for this SD card
		.card_detect_gpio_port = Sys_SDCrd0_Detect_PORT, // Card detect
		.card_detect_gpio_num = Sys_SDCrd0_Detect_NUM, // Card detect
		.card_detect_int_cfg = &Sys_SDCrd0_Detect_Interrupt_cfg,
		.card_detect_ISR = Sys_SDCrd0_Detect_ISR,
        .card_detect_task = 0,            
		.card_detected_true = 1, // truth is 1
        .m_Status = STA_NOINIT, 
        .sectors = 0, 
        .card_type = 0, 
        .mutex = 0, 
        .ff_disk_count = 0,
		.ff_disks = NULL
	}, 		
};

// Card Detect Interrupt Service Routines
void UserSDCrd_Detect_ISR() {
    card_detect_ISR(&sd_cards[0], 0);    
}
void Sys_SDCrd0_Detect_ISR() {
    card_detect_ISR(&sd_cards[1], 1);
}

/* ********************************************************************** */
/* Public functions */
/* ********************************************************************** */
sd_card_t *sd_get_by_name(const char *const name) {
		size_t i;
		for (i = 0; i < sizeof(sd_cards) / sizeof(sd_cards[0]); ++i) {
			if (0 == strcmp(sd_cards[i].pcName, name))
				break;
		}
		if (sizeof(sd_cards) / sizeof(sd_cards[0]) == i) {
			DBG_PRINTF("FF_SDDiskInit: unknown name %s\n", name);
			return NULL;
		}
		return &sd_cards[i];
}        

sd_card_t *sd_get_by_num(size_t num) {
	if (num <= sizeof(sd_cards) / sizeof(sd_cards[0])) {
		return &sd_cards[num];
	} else {
		return NULL;
	}
}        

/* [] END OF FILE */
